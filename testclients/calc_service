#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function
import optparse
from proton import generate_uuid, Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

class Client:
    def __init__(self):
        self.value = 0

    def add(self, i):
        self.value += i

    def subtract(self, i):
        self.value -= i

class Server(MessagingHandler):
    def __init__(self, listen, connect, address):
        super(Server, self).__init__()
        self.listen = listen
        self.connect = connect
        self.address = address
        self.senders = {}
        self.clients = {}
        self.sender = None

    def on_start(self, event):
        self.container = event.container
        if self.listen:
            print("Accepting connections on", self.listen)
            self.acceptor = event.container.listen(self.listen)
        if self.connect:
            self.conn = event.container.connect(self.connect)
            self.sender = self.container.create_sender(self.conn, None)
            if self.address:
                print("Subscribed to %s on %s" % (self.address, self.connect))
                self.receiver = event.container.create_receiver(self.conn, self.address)
            else:
                print("Connected to %s" % self.connect)

    def on_link_opening(self, event):
        if event.link.is_sender:
            if event.link.remote_source and event.link.remote_source.dynamic:
                event.link.source.address = str(generate_uuid())
                self.senders[event.link.source.address] = event.link
            elif event.link.remote_target and event.link.remote_target.address:
                event.link.target.address = event.link.remote_target.address
                self.senders[event.link.remote_target.address] = event.link
            elif event.link.remote_source:
                event.link.source.address = event.link.remote_source.address
        else:
            if event.link.remote_target:
                event.link.target.address = event.link.remote_target.address
            self.clients[event.link.name] = Client()

    def on_message(self, event):
        print("Received", event.message)
        client = self.clients.get(event.link.name)
        if not client:
            client = self.clients.get(event.message.correlation_id)
            if not client:
                client = Client()
                self.clients[event.message.correlation_id] = client
        sender = self.sender or self.senders.get(event.message.reply_to)
        if not sender:
            print("No link for reply")
            return
        try:
            if event.message.subject == "add":
                client.add(event.message.body)
            elif event.message.subject == "subtract":
                client.subtract(event.message.body)
            else:
                print("invalid operation: %s" % event.message.subject)
                return
            sender.send(Message(address=event.message.reply_to, body=client.value,
                                correlation_id=event.message.correlation_id))
        except Exception as e:
            text = "bad request: %s" % e
            sender.send(Message(address=event.message.reply_to, body=text,
                                correlation_id=event.message.correlation_id))

parser = optparse.OptionParser(usage="usage: %prog [options]",
                               description="Simple calculation service.")
parser.add_option("-s", "--server", default=None,
                  help="server to connect to")
parser.add_option("-l", "--listen", default=None,
                  help="host:port to listen on")
parser.add_option("-a", "--address", default=None,
                  help="address to subscribe to (valid only with --server option)")
opts, args = parser.parse_args()

if not opts.server and not opts.listen:
    print("Specify either --server or --listen")
else:
    try:
        Container(Server(opts.listen, opts.server, opts.address)).run()
    except KeyboardInterrupt: pass




