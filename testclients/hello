#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function, unicode_literals
import optparse
from proton import Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

class Print(MessagingHandler):
    def __init__(self):
        super(Print, self).__init__()

    def on_message(self, event):
        print("%s from %s" % (event.message.body, event.message.reply_to))

class Hello(MessagingHandler):
    def __init__(self, server, user):
        super(Hello, self).__init__()
        self.server = server
        self.user = user
        self.known = []

    def on_start(self, event):
        conn = event.container.connect(self.server)
        event.container.create_receiver(conn, self.user, handler = Print())
        event.container.create_receiver(conn, "multicast")
        self.sender = event.container.create_sender(conn, None)
        self.announce()

    def announce(self):
        self.sender.send(Message(address="multicast", reply_to=self.user, subject="announce"))

    def greet(self, name):
        text = "hello %s" % name
        self.sender.send(Message(address=name, reply_to=self.user, subject="greeting", body=text))

    def on_message(self, event):
        if not event.message.reply_to in self.known:
           self.known.append(event.message.reply_to)
           self.announce()
           if event.message.reply_to != self.user:
              self.greet(event.message.reply_to)

parser = optparse.OptionParser(usage="usage: %prog [options]",
                               description="greetings")
parser.add_option("-s", "--server", default="localhost:5672",
                  help="server to connect to (default %default)")
parser.add_option("-u", "--user", default=None,
                  help="name of user")
opts, args = parser.parse_args()

try:
    Container(Hello(opts.server, opts.user)).run()
except KeyboardInterrupt: pass
